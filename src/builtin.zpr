import "std/core.zpr";
import "src/ast.zpr";

var builtinFunctions: Vector*;

function add_implicit_printu_function(): Node* {
	var name = synthetic_token(TokenType::IDENTIFIER, "printu");
	var funktion = new Node(NodeType::FUNCTION, name);
	funktion.funktion.name.name = name;

	funktion.funktion.arguments = new Vector();

	var valTok = synthetic_token(TokenType::IDENTIFIER, "value");
	var val = new Node(NodeType::DEFINE_VAR, valTok);
	val.variable.name.name = valTok;
	val.variable.type = UINT_TYPE;
	funktion.funktion.arguments.push(val);

	funktion.funktion.returnType = VOID_TYPE;

	funktion.funktion.hasImplicitBody = true;

	return funktion;
}

function add_implicit_syscall_function(sysName: i8*, argCount: int): Node* {
	var name = synthetic_token(TokenType::IDENTIFIER, sysName);
	var funktion = new Node(NodeType::FUNCTION, name);
	funktion.funktion.name.name = name;
	funktion.funktion.arguments = new Vector();

	var nrTok = synthetic_token(TokenType::IDENTIFIER, "nr");
	var nr = new Node(NodeType::DEFINE_VAR, nrTok);
	nr.variable.name.name = nrTok;
	nr.variable.type = INT_TYPE;
	
	funktion.funktion.arguments.push(nr);

	for(var i = 0; i < argCount; ++i) {
		var argTok = synthetic_token(TokenType::IDENTIFIER, "arg");
		var arg = new Node(NodeType::DEFINE_VAR, argTok);
		arg.variable.name.name = argTok;
		arg.variable.type = ANY_TYPE;

		funktion.funktion.arguments.push(arg);
	}

	funktion.funktion.returnType = INT_TYPE;

	funktion.funktion.hasImplicitBody = true;

	return funktion;
}

function parser_builtin_functions(): Vector* {
	var functions = new Vector();

	functions.push(add_implicit_printu_function());
	functions.push(add_implicit_syscall_function("syscall0", 0));
	functions.push(add_implicit_syscall_function("syscall1", 1));
	functions.push(add_implicit_syscall_function("syscall2", 2));
	functions.push(add_implicit_syscall_function("syscall3", 3));
	functions.push(add_implicit_syscall_function("syscall4", 4));
	functions.push(add_implicit_syscall_function("syscall5", 5));
	functions.push(add_implicit_syscall_function("syscall6", 6));

	builtinFunctions = functions;

	return functions;
}

function generate_implicit_printu_impl(out: File*) {
	out.putsln("_FUZprintu:");
	out.putsln("		sub     rsp, 40");
	out.putsln("		mov     eax, 10");
	out.putsln("		mov     esi, 19");
	out.putsln("		mov  r10, -3689348814741910323");
	out.putsln("		mov     WORD [rsp+20], ax");
	out.putsln("		lea     r8, [rsp+19]");
	out.putsln(".L2:");
	out.putsln("		mov     rax, rdi");
	out.putsln("		movsxd  r9, esi");
	out.putsln("		sub     r8, 1");
	out.putsln("		sub     esi, 1");
	out.putsln("		mul     r10");
	out.putsln("		mov     rax, rdi");
	out.putsln("		shr     rdx, 3");
	out.putsln("		lea     rcx, [rdx+rdx*4]");
	out.putsln("		add     rcx, rcx");
	out.putsln("		sub     rax, rcx");
	out.putsln("		mov     rcx, rdi");
	out.putsln("		mov     rdi, rdx");
	out.putsln("		add     eax, 48");
	out.putsln("		mov     BYTE [r8+1], al");
	out.putsln("		cmp     rcx, 9");
	out.putsln("		ja      .L2");
	out.putsln("		mov     rdi, 1");
	out.putsln("		mov     edx, 20");
	out.putsln("		mov     rax, 1");
	out.putsln("		sub     edx, esi");
	out.putsln("		lea     rsi, [rsp+r9]");
	out.putsln("		syscall");
	out.putsln("		add     rsp, 40");
	out.putsln("		ret");
}

function generate_builtin_functions(out: File*) {
	if((builtinFunctions.at(0) as Node*).funktion.used)
		generate_implicit_printu_impl(out);

	var ARG_REGISTERS: i8*[6] = [ "rdi", "rsi", "rdx", "rcx", "r8", "r9" ];
	var SYS_REGISTERS: i8*[6] = [ "rax", "rdi", "rsi", "rdx", "r10", "r8" ];

	for(var i = 0; i <= 5; ++i) {
		if(!(builtinFunctions.at(i + 1) as Node*).funktion.used) continue;

		out.puts("_F"); out.puts("I");
		for(var arg = 0; arg < i; ++arg) {
			out.puts("A");
		}
		out.puts("Zsyscall");
		out.putd(i); out.putsln(":");

		for(var arg = 0; arg <= i; ++arg) {
			out.puts("    mov "); out.puts(SYS_REGISTERS[arg]); out.puts(", "); out.putsln(ARG_REGISTERS[arg]);
		}
		out.putsln("    syscall");
		out.putsln("    ret");
	}

	if(!(builtinFunctions.at(6 + 1) as Node*).funktion.used) return;

	out.putsln("_FIAAAAAAZsyscall6:");
	out.putsln("    push rbp");
	out.putsln("    mov rbp, rsp");

	for(var arg = 0; arg <= 5; arg = arg + 1) {
		out.puts("    mov "); out.puts(SYS_REGISTERS[arg]); out.puts(", "); out.putsln(ARG_REGISTERS[arg]);
	}
	out.putsln("    mov r9, QWORD [rsp+16]");
	out.putsln("    syscall");
	out.putsln("    leave");
	out.putsln("    ret");
}