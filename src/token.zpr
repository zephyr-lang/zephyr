import "std/core.zpr";
import "std/string.zpr";

// Updating this list requires updating token_type_to_string
enum TokenType {
	LEFT_PAREN,
	RIGHT_PAREN,
	LEFT_BRACE,
	RIGHT_BRACE,
	LEFT_SQBR,
	RIGHT_SQBR,
	COLON,
	COLON_COLON,
	SEMICOLON,
	COMMA,
	DOT,
	QUESTION,
	TILDE,
	MINUS,
	BANG,
	PLUS,
	STAR,
	SLASH,
	PERCENT,
	AMP,
	AMP_AMP,
	BAR,
	BAR_BAR,
	XOR,
	LESS,
	LSH,
	GREATER,
	RSH,
	EQ,
	EQEQ,
	BANG_EQ,
	LEQ,
	GEQ,
	ARROW,
	
	INCREMENT,
	DECREMENT,

	MINUS_EQ,
	PLUS_EQ,
	STAR_EQ,
	SLASH_EQ,
	PERCENT_EQ,
	AMP_EQ,
	BAR_EQ,
	XOR_EQ,
	LSH_EQ,
	RSH_EQ,

	INT_LITERAL,
	UINT_LITERAL,
	CHAR_LITERAL,
	FLOAT_LITERAL,
	STRING,
	IDENTIFIER,

	ALIAS,
	AS,
	ANY,
	BREAK,
	CONST,
	CONTINUE,
	DELETE,
	DELETE_ARRAY,
	DO,
	ELSE,
	ENUM,
	IF,
	IMPORT,
	INT,
	I8,
	I16,
	I32,
	I64,
	F64,
	FOR,
	FUNCTION,
	NAMESPACE,
	NEW,
	RETURN,
	SIZEOF,
	STRUCT,
	UNION,
	UINT,
	U8,
	U16,
	U32,
	U64,
	VAR,
	VOID,
	WHEN,
	WHILE,

	ERROR,
	EOF
}

struct Token {
	type: TokenType;
	start: i8*;
	length: int;
	line: int;
	filename: i8*;
}

function token_type_to_string(type: TokenType): i8* {
	when(type) {
		TokenType::LEFT_PAREN -> return "left-paren";
		TokenType::RIGHT_PAREN -> return "right-paren";
		TokenType::LEFT_BRACE -> return "left-brace";
		TokenType::RIGHT_BRACE -> return "right-brace";
		TokenType::RIGHT_BRACE -> return "right-sqbr";
		TokenType::RIGHT_BRACE -> return "right-sqbr";
		TokenType::COLON -> return "colon";
		TokenType::COLON_COLON -> return "colon-colon";
		TokenType::SEMICOLON -> return "semicolon";
		TokenType::COMMA -> return "comma";
		TokenType::DOT -> return "dot";
		TokenType::QUESTION -> return "question";
		TokenType::TILDE -> return "tilde";
		TokenType::MINUS -> return "minus";
		TokenType::BANG -> return "bang";
		TokenType::PLUS -> return "plus";
		TokenType::STAR -> return "star";
		TokenType::SLASH -> return "slash";
		TokenType::PERCENT -> return "percent";
		TokenType::AMP -> return "amp";
		TokenType::AMP_AMP -> return "amp-amp";
		TokenType::BAR -> return "bar";
		TokenType::BAR_BAR -> return "bar-bar";
		TokenType::XOR -> return "xor";
		TokenType::LESS -> return "less";
		TokenType::LSH -> return "lsh";
		TokenType::GREATER -> return "greater";
		TokenType::RSH -> return "rsh";
		TokenType::EQ -> return "=";
		TokenType::EQEQ -> return "eq-eq";
		TokenType::BANG_EQ -> return "bang-eq";
		TokenType::LEQ -> return "leq";
		TokenType::GEQ -> return "geq";
		TokenType::ARROW -> return "arrow";

		TokenType::MINUS_EQ -> return "-=";
		TokenType::PLUS_EQ -> return "+=";
		TokenType::STAR_EQ -> return "*=";
		TokenType::SLASH_EQ -> return "/=";
		TokenType::PERCENT_EQ -> return "%=";
		TokenType::AMP_EQ -> return "&=";
		TokenType::BAR_EQ -> return "|=";
		TokenType::XOR_EQ -> return "^=";
		TokenType::LSH_EQ -> return "<<=";
		TokenType::RSH_EQ -> return ">>=";

		TokenType::INT_LITERAL -> return "int-literal";
		TokenType::UINT_LITERAL -> return "uint-literal";
		TokenType::CHAR_LITERAL -> return "char-literal";
		TokenType::FLOAT_LITERAL -> return "float-literal";
		TokenType::STRING -> return "string";
		TokenType::IDENTIFIER -> return "identifier";

		TokenType::ALIAS -> return "alias";
		TokenType::AS -> return "as";
		TokenType::ANY -> return "any";
		TokenType::BREAK -> return "break";
		TokenType::CONST -> return "const";
		TokenType::CONTINUE -> return "continue";
		TokenType::DELETE -> return "delete";
		TokenType::DELETE_ARRAY -> return "delete-array";
		TokenType::DO -> return "do";
		TokenType::ELSE -> return "else";
		TokenType::ELSE -> return "enum";
		TokenType::IF -> return "if";
		TokenType::IMPORT -> return "import";
		TokenType::INT -> return "int";
		TokenType::I8 -> return "i8";
		TokenType::I16 -> return "i16";
		TokenType::I32 -> return "i32";
		TokenType::I64 -> return "i64";
		TokenType::F64 -> return "f64";
		TokenType::FOR -> return "for";
		TokenType::FUNCTION -> return "function";
		TokenType::NAMESPACE -> return "namespace";
		TokenType::NEW -> return "new";
		TokenType::RETURN -> return "return";
		TokenType::SIZEOF -> return "sizeof";
		TokenType::STRUCT -> return "struct";
		TokenType::UNION -> return "union";
		TokenType::UINT -> return "uint";
		TokenType::U8 -> return "u8";
		TokenType::U16 -> return "u16";
		TokenType::U32 -> return "u32";
		TokenType::U64 -> return "u64";
		TokenType::VAR -> return "var";
		TokenType::VOID -> return "void";
		TokenType::WHEN -> return "when";
		TokenType::WHILE -> return "while";

		TokenType::ERROR -> return "error";
		TokenType::EOF -> return "eof";
	}

	return "<unknown type>";
}

function put_token_string(token: Token*) {
	fput_token_string(stdout, token);
}

function eput_token_string(token: Token*) {
	fput_token_string(stderr, token);
}

function fput_token_string(fd: int, token: Token*) {
	write(fd, token.start, token.length);
}

function File.put_token_string(token: Token*) {
	this.write(token.start, token.length);
}

function print_token(token: Token*) {
	putd(token.line);
	puts(" ");
	puts(token_type_to_string(token.type));
	puts(" '");
	put_token_string(token);
	puts("'");
}

function Token.equals(b: Token*): bool {
	return this.length == b.length && memeq(this.start, b.start, this.length);
}

function synthetic_token(type: TokenType, value: i8*): Token* {
	var token: Token* = new Token;
	token.line = 0;
	token.type = type;
	token.start = value;
	token.length = strlen(value);
	return token;
}

function Token.name_to_str(): i8* {
	var name: i8* = new i8[this.length + 1];
	memcpy(name, this.start, this.length);
	name[this.length] = 0;
	return name;
}