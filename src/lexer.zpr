import "std/core.zpr";
import "std/string.zpr";
import "src/token.zpr";

struct Lexer {
	start: i8*;
	current: i8*;

	line: int;

	filename: i8*;
}

function new_lexer(filename: i8*, source: i8*): Lexer* {
	var lexer = new Lexer;
	lexer.start = source;
	lexer.current = source;
	lexer.line = 1;
	lexer.filename = filename;

	return lexer;
}

function Lexer.is_at_end(): int {
	return *this.current == 0;
}

function Lexer.advance(): i8 {
	this.current = &this.current[1];
	return this.current[-1];
}

function Lexer.peek(): i8 {
	return *this.current;
}

// Will return the character *after* the current one without consuming anything.
// E.g., given the string "abc", with the start pointer at the start of the string,
// peek() will return the "a" and peek_next() will return the "b"
function Lexer.peek_next(): i8 {
	if(this.is_at_end()) return 0;
	return this.current[1];
}

function Lexer.match(expected: i8): int {
	if(this.is_at_end()) return false;
	if(*this.current != expected) return false;
	this.current = &this.current[1];
	return true;
}

function Lexer.make_token(type: int): Token* {
	var token = new Token;
	token.type = type;
	token.start = this.start;
	token.length = (this.current as int) - (this.start as int);
	token.line = this.line;
	token.filename = this.filename;
	return token;
}

function Lexer.error_token(message: i8*): Token* {
	var token = new Token;
	token.type = TokenType::ERROR;
	token.start = message;
	token.length = strlen(message);
	token.line = this.line;
	token.filename = this.filename;
	return token;
}

function Lexer.match_keyword(keyword: i8*): int {
	var length = strlen(keyword);
	return (this.current as int) - (this.start as int) == length && memeq(this.start, keyword, length);
}

function Lexer.identifier_type(): int {
	if(this.match_keyword("alias")) return TokenType::ALIAS;
	if(this.match_keyword("as")) return TokenType::AS;
	if(this.match_keyword("any")) return TokenType::ANY;
	if(this.match_keyword("break")) return TokenType::BREAK;
	if(this.match_keyword("const")) return TokenType::CONST;
	if(this.match_keyword("continue")) return TokenType::CONTINUE;
	if(this.match_keyword("delete")) {
		if(this.match('[') && this.match(']')) {
			return TokenType::DELETE_ARRAY;
		}

		return TokenType::DELETE;
	}
	if(this.match_keyword("do")) return TokenType::DO;
	if(this.match_keyword("else")) return TokenType::ELSE;
	if(this.match_keyword("enum")) return TokenType::ENUM;
	if(this.match_keyword("if")) return TokenType::IF;
	if(this.match_keyword("import")) return TokenType::IMPORT;
	if(this.match_keyword("int")) return TokenType::INT;
	if(this.match_keyword("i8")) return TokenType::I8;
	if(this.match_keyword("i16")) return TokenType::I16;
	if(this.match_keyword("i32")) return TokenType::I32;
	if(this.match_keyword("i64")) return TokenType::I64;
	if(this.match_keyword("f64")) return TokenType::F64;
	if(this.match_keyword("for")) return TokenType::FOR;
	if(this.match_keyword("function")) return TokenType::FUNCTION;
	if(this.match_keyword("namespace")) return TokenType::NAMESPACE;
	if(this.match_keyword("new")) return TokenType::NEW;
	if(this.match_keyword("return")) return TokenType::RETURN;
	if(this.match_keyword("sizeof")) return TokenType::SIZEOF;
	if(this.match_keyword("struct")) return TokenType::STRUCT;
	if(this.match_keyword("union")) return TokenType::UNION;
	if(this.match_keyword("uint")) return TokenType::UINT;
	if(this.match_keyword("u8")) return TokenType::U8;
	if(this.match_keyword("u16")) return TokenType::U16;
	if(this.match_keyword("u32")) return TokenType::U32;
	if(this.match_keyword("u64")) return TokenType::U64;
	if(this.match_keyword("var")) return TokenType::VAR;
	if(this.match_keyword("void")) return TokenType::VOID;
	if(this.match_keyword("when")) return TokenType::WHEN;
	if(this.match_keyword("while")) return TokenType::WHILE;
	return TokenType::IDENTIFIER;
}

function Lexer.skip_whitespace() {
	for(;;) {
		var c = this.peek();

		if(c == ' ' || c == 13 || c == 9) {
			this.advance();
		}
		else if(c == 10) {
			this.line++;
			this.advance();
		}
		else if(c == '/') {
			if(this.peek_next() == '/') {
				while(this.peek() != 10 && !this.is_at_end()) this.advance();
			}
			else return;
		}
		else {
			return;
		}
	}
}

function Lexer.number(): Token* {
	while(is_digit(this.peek())) this.advance();

	if(this.match('.')) {
		while(is_digit(this.peek())) this.advance();
		return this.make_token(TokenType::FLOAT_LITERAL);
	}
	else if(this.match('u') || this.match('U')) {
		return this.make_token(TokenType::UINT_LITERAL);
	}

	return this.make_token(TokenType::INT_LITERAL);
}

function Lexer.identifier(): Token* {
	while(is_alpha(this.peek()) || is_digit(this.peek()) || this.peek() == '_') this.advance();
	return this.make_token(this.identifier_type());
}

function Lexer.character(): Token* {
	if(this.is_at_end()) return this.error_token("Expected character literal");
	this.advance();

	if(this.current[-1] == '\\') {
		this.advance();

		if(this.current[-1] == 'x' || this.current[-1] == 'X') {
			this.advance();
			if(this.is_at_end()) return this.error_token("Invalid character escape");
			this.advance();
		}
	}

	if(!this.match('\'')) return this.error_token("Expected closing single quote");
	return this.make_token(TokenType::CHAR_LITERAL);
}

function Lexer.string(): Token* {
	while(!(this.peek() == '"' && this.current[-1] != '\\') && !this.is_at_end()) {
		if(this.peek() == '\n') ++this.line;
		this.advance();
	}

	if(!this.match('"')) {
		return this.error_token("Expected closing double quote");
	}

	return this.make_token(TokenType::STRING);
}

function Lexer.less_than(): int {
	var type = TokenType::LESS;

	if(this.match('=')) type = TokenType::LEQ;
	else if(this.match('<')) {
		type = TokenType::LSH;

		if(this.match('=')) {
			type = TokenType::LSH_EQ;
		}
	}
	
	return type;
}

function Lexer.greater_than(): int {
	var type = TokenType::GREATER;

	if(this.match('=')) type = TokenType::GEQ;
	else if(this.match('>')) {
		type = TokenType::RSH;

		if(this.match('=')) {
			type = TokenType::RSH_EQ;
		}
	}
	
	return type;
}

function Lexer.amp(): int {
	var type = TokenType::AMP;

	if(this.match('=')) type = TokenType::AMP_EQ;
	else if(this.match('&')) type = TokenType::AMP_AMP;
	
	return type;
}

function Lexer.bar(): int {
	var type = TokenType::BAR;

	if(this.match('=')) type = TokenType::BAR_EQ;
	else if(this.match('|')) type = TokenType::BAR_BAR;
	
	return type;
}

function Lexer.minus(): int {
	var type = TokenType::MINUS;

	if(this.match('=')) type = TokenType::MINUS_EQ;
	else if(this.match('-')) type = TokenType::DECREMENT;
	else if(this.match('>')) type = TokenType::ARROW;
	
	return type;
}

function Lexer.plus(): int {
	var type = TokenType::PLUS;

	if(this.match('=')) type = TokenType::PLUS_EQ;
	else if(this.match('+')) type = TokenType::INCREMENT;
	
	return type;
}

function Lexer.next(): Token* {
	this.skip_whitespace();

	this.start = this.current;

	if(this.is_at_end()) return this.make_token(TokenType::EOF);
	
	var c = this.advance();

	if(is_alpha(c) || c == '_') return this.identifier();
	if(is_digit(c)) return this.number();

	if(c == '\'') return this.character();
	if(c == '"') return this.string();

	when(c) {
		'(' -> return this.make_token(TokenType::LEFT_PAREN);
		')' -> return this.make_token(TokenType::RIGHT_PAREN);
		'{' -> return this.make_token(TokenType::LEFT_BRACE);
		'}' -> return this.make_token(TokenType::RIGHT_BRACE);
		'[' -> return this.make_token(TokenType::LEFT_SQBR);
		']' -> return this.make_token(TokenType::RIGHT_SQBR);
		':' -> return this.make_token(this.match(':') ? TokenType::COLON_COLON : TokenType::COLON);
		';' -> return this.make_token(TokenType::SEMICOLON);
		',' -> return this.make_token(TokenType::COMMA);
		'.' -> return this.make_token(TokenType::DOT);
		'?' -> return this.make_token(TokenType::QUESTION);
		'~' -> return this.make_token(TokenType::TILDE);
		'-' -> return this.make_token(this.minus());
		'!' -> return this.make_token(this.match('=') ? TokenType::BANG_EQ : TokenType::BANG);
		'+' -> return this.make_token(this.plus());
		'*' -> return this.make_token(this.match('=') ? TokenType::STAR_EQ : TokenType::STAR);
		'/' -> return this.make_token(this.match('=') ? TokenType::SLASH_EQ : TokenType::SLASH);
		'%' -> return this.make_token(this.match('=') ? TokenType::PERCENT_EQ : TokenType::PERCENT);
		'&' -> return this.make_token(this.amp());
		'|' -> return this.make_token(this.bar());
		'^' -> return this.make_token(this.match('=') ? TokenType::XOR_EQ : TokenType::XOR);
		'<' -> return this.make_token(this.less_than());
		'>' -> return this.make_token(this.greater_than());
		'=' -> return this.make_token(this.match('=') ? TokenType::EQEQ : TokenType::EQ);
	}

	return this.error_token("Unexpected character");
}