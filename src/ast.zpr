import "std/vector.zpr";
import "std/map.zpr";

// Updating this list requires updating node_type_to_string and print_ast_depth
enum NodeType {
	BWNOT,
	NEG,
	NOT,
	ADD,
	SUB,
	MUL,
	DIV,
	MOD,
	BWAND,
	BWOR,
	XOR,
	LSH,
	RSH,
	EQUAL,
	NOT_EQUAL,
	LESS,
	LESS_EQ,
	GREATER,
	GREATER_EQ,
	AND,
	OR,
	TERNARY,
	ADDROF,
	DEREF,
	SIZEOF,
	ACCESS_SUBSCRIPT,
	ACCESS_MEMBER,
	ASSIGN,
	PRE_INCREMENT,
	PRE_DECREMENT,
	POST_INCREMENT,
	POST_DECREMENT,
	INT_TO_FLOAT,
	FLOAT_TO_INT,

	RELATIVE,
	OVERLOAD,
	INT_LITERAL,
	UINT_LITERAL,
	CHAR_LITERAL,
	FLOAT_LITERAL,
	STRING,
	CALL,
	CALL_METHOD,
	DEFINE_CONST,
	DEFINE_VAR,
	ACCESS_VAR,
	DEFINE_GLOBAL_VAR,
	ACCESS_GLOBAL_VAR,
	ARRAY_INIT,
	EXPR_STMT,
	NEW,
	NEW_ARRAY,
	DELETE,
	DELETE_ARRAY,
	IF,
	WHILE,
	DO_WHILE,
	FOR,
	WHEN,
	BRANCH,
	CAST,
	STRUCT,
	UNION,
	ENUM,
	MEMBER,
	CONTINUE,
	BREAK,
	RETURN,
	FUNCTION,
	NAMESPACE,
	BLOCK,
	PROGRAM
}

// Updating this list requires updating data_type_to_string
enum DataType {
	VOID,
	INT,
	I8,
	I16,
	I32,
	I64,
	UINT,
	U8,
	U16,
	U32,
	U64,
	F64,
	ANY,
	STRUCT,
	UNION,
	ALIAS,
	UNRESOLVED
}

struct Type {
	type: DataType;
	indirection: int;
	isArray: bool;
	arrayLength: int;

	name: Name;
	fields: Vector*;
	methods: std::map::HashMap*;
	aliased: Type*;

	built: bool;
}

enum LValue {
	NONE,
	LOCAL,
	GLOBAL,
	SUBSCRIPT,
	DEREF,
	MEMBER
}

struct Node {
	type: NodeType;
	position: Token*;
	lvalue: LValue;
	computedType: Type*;

	union {
		unary: Node*;

		binary: struct {
			lhs: Node*;
			rhs: Node*;
		};

		ternary: struct {
			lhs: Node*;
			mid: Node*;
			rhs: Node*;
		};

		conditional: struct {
			condition: Node*;
			doTrue: Node*;
			doFalse: Node*;
		};

		loop: struct {
			initial: Node*;
			condition: Node*;
			iteration: Node*;
			body: Node*;
		};

		funktion: struct {
			name: Name;
			returnType: Type*;
			body: Node*;
			hasImplicitBody: bool;

			isMethod: bool;
			parent: Node*;
			parentType: Type*;

			arguments: Vector*;
			argTypes: Vector*;

			localVariableStackOffset: int;
			argumentStackOffset: int;

			used: bool;
			dced: bool;
		};

		block: struct {
			children: Vector*;

			hasReturned: int;

			parent: Node*;
			variables: Vector*;
			currentStackOffset: int;
		};

		literal: struct {
			type: Type*;
			used: bool;

			az: union {
				integer: int;
				uinteger: uint;
				string: struct {
					chars: i8*;
					length: int;
					id: int;
				};
				float: struct {
					str: i8*;
					id: int;
				};
			};
		};

		variable: struct {
			used: bool;
			
			name: Name;
			type: Type*;

			value: Node*;
			arguments: Vector*;
			argTypes: Vector*;
			copyConstructor: bool;

			stackOffset: int;
			unionField: int;
		};

		constant: struct {
			name: Name;
			value: int;
		};

		member: struct {
			name: Token*;
			parent: Node*;
			value: Node*;
			memberRef: Node*;
		};

		assignment: struct {
			lhs: Node*;
			rhs: Node*;
			op: Token*;
		};

		vhen: struct {
			match: Node*;
			branches: Vector*;
			default: Node*;
		};

		branch: struct {
			values: Vector*;
			body: Node*;
		};

		nameSpace: struct {
			name: Namespace*;
			body: Node*;
		};

		constructor: struct {
			type: Type*;
			shouldConstruct: bool;
			argTypes: Vector*;
			union {
				arguments: Vector*;
				array: struct {
					length: Node*;
				};
			};
		};

		deconstructor: struct {
			value: Node*;
			elementType: Type*;
			shouldDeconstruct: bool;
		};

		ret: struct {
			value: Node*;
			variables: Vector*;
			isStructural: bool;
			type: Type*;
			structureVarOffset: int;
		};

		overload: struct {
			value: Node*;
			lhsType: Type*;
			rhsType: Type*;
			op: Token*;
		};
	};
}

struct Namespace {
	parts: Vector*; // Vector*<Token*>
}

struct Name {
	namespaceName: Namespace*;
	name: Token*;
}

function Name.init(namespaceName: Namespace*, name: Token*) {
	this.namespaceName = namespaceName;
	this.name = name;
}

function Name.fput(fd: int) {
	if(this.namespaceName != null) {
		this.namespaceName.fput(fd);
		fputs(fd, "::");
	}
	fput_token_string(fd, this.name);
}

function Name.eput() {
	this.fput(stderr);
}

function Name.put() {
	this.fput(stdout);
}

function bind_name(name: Name*, token: Token*) {
	name.name = token;
	name.namespaceName = null;
}

function Name.print_position() {
	this.name.print_position();
}

function Name.equals(other: Name*): bool {
	if(!this.name.equals(other.name)) return false;

	if(this.namespaceName == null || other.namespaceName == null) {
		return (this.namespaceName == null && other.namespaceName == null);
	}

	if(this.namespaceName.parts.size != other.namespaceName.parts.size) return false;

	for(var i = 0; i < this.namespaceName.parts.size; ++i) {
		var thisPart: Token* = this.namespaceName.parts.at(i);
		var otherPart: Token* = other.namespaceName.parts.at(i);

		if(!thisPart.equals(otherPart)) return false;
	}

	return true;
}

function File.put_name(name: Name*) {
	if(name.namespaceName != null) { 
		this.put_namespace_name(name.namespaceName);
		this.puts("_");
	}
	this.puts("Z");
	this.put_token_string(name.name);
}

function Name.to_string(): i8* {
	var namespaceLength = 0;
	var parts = new_vector();

	if(this.namespaceName != null) {
		for(var i = 0; i < this.namespaceName.parts.size; ++i) {
			var part = (this.namespaceName.parts.at(i) as Token*).name_to_str();
			parts.push(part);
			namespaceLength += strlen(part);
			namespaceLength += 2;
		}
	}

	var str: i8* = malloc(namespaceLength + this.name.length + 1);
	str[0] = 0;

	for(var i = 0; i < parts.size; ++i) {
		strcat(str, parts.at(i));
		strcat(str, "::");
	}

	var length = strlen(str);

	var name = this.name.name_to_str();
	strcat(str, name);
	free(name);

	for(var i = 0; i < parts.size; ++i) {
		var part = parts.at(i);
		free(part);
	}

	free(parts);

	return str;
}

function new_namespace(name: Token*, parent: Namespace*): Namespace* {
	var namespaceName: Namespace* = malloc(sizeof(Namespace));
	namespaceName.parts = new_vector();

	if(parent != null) {
		for(var i = 0; i < parent.parts.size; ++i) {
			namespaceName.parts.push(parent.parts.at(i));
		}
	}

	if(name != null) namespaceName.parts.push(name);

	return namespaceName;
}

function Namespace.fput(fd: int) {
	for(var i = 0; i < this.parts.size; ++i) {
		fput_token_string(fd, this.parts.at(i));
		if(i != this.parts.size - 1) fputs(fd, "::");
	}
}

function Namespace.put() {
	this.fput(stdout);
}

function Namespace.eput() {
	this.fput(stderr);
}

function File.put_namespace_name(namespaceName: Namespace*) {
	this.puts("N");
	for(var i = 0; i < namespaceName.parts.size; ++i) {
		this.put_token_string(namespaceName.parts.at(i));
		if(i != namespaceName.parts.size - 1) this.puts("_");
	}
}

function Type.add_method(method: Node*) {
	var nameStr = method.funktion.name.to_string();

	var found = false;
	var list = this.methods.get(nameStr, &found) as Vector*;

	if(found) {
		list.push(method);
	}
	else {
		list = new_vector();
		list.push(method);
		this.methods.set(nameStr, list);
	}
}

function Type.get_method(name: Name*, found: bool*): Vector* {
	var nameStr = name.to_string();

	var list = this.methods.get(nameStr, found) as Vector*;

	return list;
}

function data_type_to_string(type: DataType): i8* {
	when(type) {
		DataType::VOID -> return "void";
		DataType::INT -> return "int";
		DataType::I8 -> return "i8";
		DataType::I16 -> return "i16";
		DataType::I32 -> return "i32";
		DataType::I64 -> return "i64";
		DataType::UINT -> return "uint";
		DataType::U8 -> return "u8";
		DataType::U16 -> return "u16";
		DataType::U32 -> return "u32";
		DataType::U64 -> return "u64";
		DataType::F64 -> return "f64";
		DataType::ANY -> return "any";
		DataType::ALIAS, DataType::UNRESOLVED, DataType::STRUCT, DataType::UNION -> {
			eputsln("Unreachable - data_type_to_string");
			return null;
		}
	}

	return "<unknown type>";
}

function struct_name_string(strukt: Type*): i8* {
	return strukt.name.to_string();
}

function __type_to_string(type: Type*, quoted: bool): i8* {
	var baseType: i8*;

	if(type.type == DataType::STRUCT || type.type == DataType::UNION || type.type == DataType::UNRESOLVED) {
		baseType = struct_name_string(type);
	}
	else {
		baseType = data_type_to_string(type.type);
	}

	var aliasName: i8*;
	var aliasLength = 0;
	if(type.type != DataType::ALIAS && type.aliased != null) {
		aliasName = type.aliased.name.to_string();
		// " (alias of " ... ")"
		aliasLength = 12 + strlen(aliasName);
	}

	var str: i8*;
	// No alias
	if(aliasLength == 0) {
		var quotesLength = quoted ? 2 : 0;

		str = malloc(quoted + strlen(baseType) + type.indirection + aliasLength + 1);
		if(quoted) {
			str[0] = 39; // '
			strcpy(&str[1], baseType);
		}
		else
			strcpy(str, baseType);

		for(var i = 0; i < type.indirection; ++i) {
			strcat(str, "*");
		}
		if(quoted) strcat(str, "'");
	}
	else {
		var quotesLength = quoted ? 4 : 2;

		str = malloc(strlen(baseType) + quotesLength + aliasLength + 1);

		if(quoted) {
			str[0] = 39;
			strcpy(&str[1], aliasName);
			strcat(str, "'");
		}
		else {
			strcpy(str, aliasName);
		}

		strcat(str, " (alias of '");
		strcat(str, baseType);
		strcat(str, "')");
		free(aliasName);
	}

	return str;
}

function type_to_string(type: Type*): i8* {
	return __type_to_string(type, true);
}

function uq_type_to_string(type: Type*): i8* {
	return __type_to_string(type, false);
}

function node_type_to_string(type: NodeType): i8* {
	when(type) {
		NodeType::BWNOT -> return "~";
		NodeType::NEG -> return "-";
		NodeType::NOT -> return "!";
		NodeType::ADD -> return "+";
		NodeType::SUB -> return "-";
		NodeType::MUL -> return "*";
		NodeType::DIV -> return "/";
		NodeType::MOD -> return "%";
		NodeType::BWAND -> return "&";
		NodeType::BWOR -> return "|";
		NodeType::XOR -> return "^";
		NodeType::LSH -> return "<<";
		NodeType::RSH -> return ">>";
		NodeType::EQUAL -> return "==";
		NodeType::NOT_EQUAL -> return "!=";
		NodeType::LESS -> return "<";
		NodeType::LESS_EQ -> return "<=";
		NodeType::GREATER -> return ">";
		NodeType::GREATER_EQ -> return ">=";
		NodeType::AND -> return "&&";
		NodeType::OR -> return "||";
		NodeType::TERNARY -> return "?";
		NodeType::ADDROF -> return "&";
		NodeType::DEREF -> return "*";
		NodeType::SIZEOF -> return "sizeof";
		NodeType::ACCESS_SUBSCRIPT -> return "[";
		NodeType::ACCESS_MEMBER -> return ".";
		NodeType::ASSIGN -> return "=";
		NodeType::PRE_INCREMENT -> return "++";
		NodeType::PRE_DECREMENT -> return "--";
		NodeType::POST_INCREMENT -> return "++";
		NodeType::POST_DECREMENT -> return "--";
		NodeType::INT_TO_FLOAT -> return "int to float";
		NodeType::FLOAT_TO_INT -> return "float to int";
		NodeType::INT_LITERAL -> return "int literal";
		NodeType::UINT_LITERAL -> return "uint literal";
		NodeType::CHAR_LITERAL -> return "char literal";
		NodeType::STRING -> return "string";
		NodeType::CALL -> return "call";
		NodeType::CALL_METHOD -> return "call method";
		NodeType::OVERLOAD -> return "overload";
		NodeType::DEFINE_CONST -> return "define const";
		NodeType::DEFINE_VAR -> return "define var";
		NodeType::ACCESS_VAR -> return "access var";
		NodeType::DEFINE_GLOBAL_VAR -> return "define gvar";
		NodeType::ACCESS_GLOBAL_VAR -> return "access gvar";
		NodeType::ARRAY_INIT -> return "init array";
		NodeType::EXPR_STMT -> return "expr stmt";
		NodeType::NEW -> return "new";
		NodeType::NEW_ARRAY -> return "new[]";
		NodeType::DELETE -> return "delete";
		NodeType::DELETE_ARRAY -> return "delete[]";
		NodeType::IF -> return "if";
		NodeType::WHILE -> return "while";
		NodeType::FOR -> return "for";
		NodeType::WHEN -> return "when";
		NodeType::BRANCH -> return "branch";
		NodeType::CAST -> return "cast";
		NodeType::STRUCT -> return "struct";
		NodeType::UNION -> return "union";
		NodeType::ENUM -> return "enum";
		NodeType::MEMBER -> return "member";
		NodeType::CONTINUE -> return "continue";
		NodeType::BREAK -> return "break";
		NodeType::RETURN -> return "return";
		NodeType::FUNCTION -> return "function";
		NodeType::NAMESPACE -> return "namespace";
		NodeType::BLOCK -> return "block";
		NodeType::PROGRAM -> return "program";
	}

	return "<unknown node type>";
}

function is_unary_op(type: NodeType): bool {
	return (
		type == NodeType::BWNOT ||
		type == NodeType::NEG ||
		type == NodeType::NOT ||
		type == NodeType::ADDROF ||
		type == NodeType::DEREF
	);
}

function is_binary_op(type: NodeType): bool {
	return (
		type == NodeType::ADD ||
		type == NodeType::SUB ||
		type == NodeType::MUL ||
		type == NodeType::DIV ||
		type == NodeType::MOD ||
		type == NodeType::BWAND ||
		type == NodeType::BWOR ||
		type == NodeType::XOR ||
		type == NodeType::LSH ||
		type == NodeType::RSH ||
		type == NodeType::EQUAL ||
		type == NodeType::NOT_EQUAL ||
		type == NodeType::LESS ||
		type == NodeType::LESS_EQ ||
		type == NodeType::GREATER ||
		type == NodeType::GREATER_EQ ||
		type == NodeType::OR ||
		type == NodeType::AND
	);
}

function is_float_arithmetic(type: NodeType): bool {
	when(type) {
		NodeType::ADD, NodeType::SUB, NodeType::MUL, NodeType::DIV -> return true;
	}
	return false;
}

function is_comparison(type: NodeType): bool {
	when(type) {
		NodeType::EQUAL, NodeType::NOT_EQUAL, NodeType::LESS, NodeType::LESS_EQ, NodeType::GREATER, NodeType::GREATER_EQ -> return true;
	}
	return false;
}

function print_ast_depth(node: Node*, depth: int) {
	for(var i = 0; i < depth; ++i) puts("  ");

	if(is_unary_op(node.type)) {
		putsln(node_type_to_string(node.type));
		print_ast_depth(node.unary, depth + 1);
		return;
	}
	else if(is_binary_op(node.type)) {
		putsln(node_type_to_string(node.type));
		print_ast_depth(node.binary.lhs, depth + 1);
		putln();
		print_ast_depth(node.binary.rhs, depth + 1);
		return;
	}
	when(node.type) {
		NodeType::PROGRAM -> {
			for(var i = 0; i < node.block.children.size; ++i)
				print_ast_depth(node.block.children.at(i), depth);
		}
		NodeType::BLOCK -> {
			putsln("{");
			for(var i = 0; i < node.block.children.size; ++i)
				print_ast_depth(node.block.children.at(i), depth + 1);
			for(var i = 0; i < depth; ++i) puts("  ");
			putsln("}");
		}
		NodeType::FUNCTION -> {
			puts("function "); node.funktion.name.put(); puts(": "); putsln(uq_type_to_string(node.funktion.returnType));
			for(var i = 0; i < node.funktion.arguments.size; ++i) {
				var arg: Node* = node.funktion.arguments.at(i);
				puts("("); arg.variable.name.put(); puts(": "); puts(uq_type_to_string(arg.variable.type)); puts(") ");
			}
			if(node.funktion.arguments.size > 0) putln();
			if(!node.funktion.hasImplicitBody)
				print_ast_depth(node.funktion.body, depth);
		}
		NodeType::CALL -> {
			puts("call "); node.funktion.name.put(); putln();
			for(var i = 0; i < node.funktion.arguments.size; ++i) {
				var arg: Node* = node.funktion.arguments.at(i);
				print_ast_depth(arg, depth + 1);
				if(i != node.funktion.arguments.size -1 ) putln();
			}
		}
		NodeType::CALL_METHOD -> {
			puts("call "); node.funktion.name.put(); putln();
			for(var i = 0; i < node.funktion.arguments.size; ++i) {
				var arg: Node* = node.funktion.arguments.at(i);
				print_ast_depth(arg, depth + 1);
				if(i != node.funktion.arguments.size -1 ) putln();
			}

			putln();
			for(var i = 0; i < depth; ++i) puts("  ");
			putsln("of");
			print_ast_depth(node.funktion.parent, depth + 1);
		}
		NodeType::EXPR_STMT -> {
			putsln("pop");
			print_ast_depth(node.unary, depth + 1);
			putln();
		}
		NodeType::IF -> {
			putsln("if");
			print_ast_depth(node.conditional.condition, depth + 1);
			putln();
			print_ast_depth(node.conditional.doTrue, depth + 1);
			putln();

			if(node.conditional.doFalse != null) {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("else");
				print_ast_depth(node.conditional.doFalse, depth + 1);
				putln();
			}
		}
		NodeType::WHILE -> {
			putsln("while");
			print_ast_depth(node.conditional.condition, depth + 1);
			putln();
			print_ast_depth(node.conditional.doTrue, depth + 1);
			putln();
		}
		NodeType::DO_WHILE -> {
			putsln("do");
			print_ast_depth(node.conditional.doTrue, depth + 1);
			for(var i = 0; i < depth; ++i) puts("  ");
			putsln("while");
			print_ast_depth(node.conditional.condition, depth + 1);
			putln();
		}
		NodeType::FOR -> {
			putsln("for");
			if(node.loop.initial != null)
				print_ast_depth(node.loop.initial, depth + 1);
			else {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("(no initializer)");
			}

			if(node.loop.condition != null) {
				print_ast_depth(node.loop.condition, depth + 1);
				putln();
			} else {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("(no condition)");
			}

			if(node.loop.iteration != null) {
				print_ast_depth(node.loop.iteration, depth + 1);
				putln();
			} else {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("(no iteration)");
			}

			print_ast_depth(node.loop.body, depth + 1);
			putln();
		}
		NodeType::RETURN -> {
			putsln("return");
			if(node.unary != null) {
				print_ast_depth(node.unary, depth + 1);
			}
			else {
				for(var i = 0; i < depth + 1; ++i) puts("  ");
				puts("(void)");
			}
			putln();
		}
		NodeType::DEFINE_CONST -> {
			puts("const "); node.constant.name.put(); puts(" = "); putd(node.constant.value); putln();
		}
		NodeType::DEFINE_VAR, NodeType::DEFINE_GLOBAL_VAR -> {
			puts("var "); node.variable.name.put(); puts(": "); putsln(uq_type_to_string(node.variable.type));
			if(node.variable.value != null) {
				print_ast_depth(node.variable.value, depth + 1);
				putln();
			}
		}
		NodeType::ACCESS_VAR,NodeType::ACCESS_GLOBAL_VAR -> {
			puts("(var "); node.variable.name.put(); puts(")");
		}
		NodeType::INT_LITERAL -> {
			puts("(literal "); putd(node.literal.az.integer); puts(")");
		}
		NodeType::UINT_LITERAL -> {
			puts("(literal "); putu(node.literal.az.uinteger); puts(")");
		}
		NodeType::CHAR_LITERAL -> {
			puts("(literal "); putc(node.literal.az.integer); puts(")");
		}
		NodeType::FLOAT_LITERAL -> {
			puts("(literal "); puts(node.literal.az.float.str); puts(")");
		}
		NodeType::STRING -> {
			puts("(literal "); puts(node.literal.az.string.chars); puts(")");
		}
		NodeType::TERNARY -> {
			putsln("?");
			print_ast_depth(node.conditional.condition, depth + 1);
			putln();
			print_ast_depth(node.conditional.doTrue, depth + 1);
			putsln(":");
			print_ast_depth(node.conditional.doFalse, depth + 1);
		}
		NodeType::SIZEOF -> {
			puts("sizeof("); puts(uq_type_to_string(node.computedType)); puts(")");
		}
		NodeType::ACCESS_SUBSCRIPT -> {
			putsln("subscript [");
			print_ast_depth(node.binary.lhs, depth + 1);
			putln();
			print_ast_depth(node.binary.rhs, depth + 1);
			putln();
			for(var i = 0; i < depth; ++i) puts("  ");
			puts("]");
		}
		NodeType::ARRAY_INIT -> {
			putsln("[");
			for(var i = 0; i < node.block.children.size; ++i) {
				print_ast_depth(node.block.children.at(i), depth + 1);
				putln();
			}
			for(var i = 0; i < depth; ++i) puts("  ");
			puts("]");
		}
		NodeType::DEREF -> {
			putsln("*");
			print_ast_depth(node.unary, depth + 1);
		}
		NodeType::CAST -> {
			putsln("cast");
			print_ast_depth(node.unary, depth + 1);
			putln();
			for(var i = 0; i < depth; ++i) puts("  ");
			puts("as "); puts(uq_type_to_string(node.computedType));
		}
		NodeType::STRUCT -> {
			puts("struct "); node.variable.name.put(); putln();
			for(var i = 0; i < node.computedType.fields.size; ++i) {
				print_ast_depth(node.computedType.fields.at(i), depth + 1);
			}
		}
		NodeType::UNION -> {
			puts("union "); node.variable.name.put(); putln();
			for(var i = 0; i < node.computedType.fields.size; ++i) {
				print_ast_depth(node.computedType.fields.at(i), depth + 1);
			}
		}
		NodeType::ENUM -> {
			putsln("enum");
			for(var i = 0; i < node.block.children.size; ++i) {
				print_ast_depth(node.block.children.at(i), depth + 1);
			}
		}
		NodeType::MEMBER -> {
			node.variable.name.put(); puts(": "); putsln(uq_type_to_string(node.variable.type));
		}
		NodeType::ACCESS_MEMBER -> {
			puts("."); put_token_string(node.member.name); putln();
			print_ast_depth(node.member.parent, depth + 1);
		}
		NodeType::CONTINUE -> {
			putsln("continue");
		}
		NodeType::BREAK -> {
			putsln("break");
		}
		NodeType::ASSIGN -> {
			putsln(token_type_to_string(node.assignment.op.type));
			print_ast_depth(node.assignment.lhs, depth);
			putln();
			print_ast_depth(node.assignment.rhs, depth + 1);
		}
		NodeType::PRE_INCREMENT -> {
			putsln("pre++");
			print_ast_depth(node.unary, depth + 1);
		}
		NodeType::PRE_DECREMENT -> {
			putsln("pre--");
			print_ast_depth(node.unary, depth + 1);
		}
		NodeType::POST_INCREMENT -> {
			putsln("post++");
			print_ast_depth(node.unary, depth + 1);
		}
		NodeType::POST_DECREMENT -> {
			putsln("post--");
			print_ast_depth(node.unary, depth + 1);
		}
		NodeType::WHEN -> {
			putsln("when");
			print_ast_depth(node.vhen.match, depth + 1);
			for(var i = 0; i < node.vhen.branches.size; i = i + 1) {
				print_ast_depth(node.vhen.branches.at(i), depth + 1);
			}
			if(node.vhen.default != null) {
				for(var i = 0; i < depth; ++i) puts("  ");
				putsln("else");
				print_ast_depth(node.vhen.default, depth + 1);
			}
		}
		NodeType::BRANCH -> {
			for(var i = 0; i < node.branch.values.size; ++i) {
				putd(node.branch.values.at(i) as int);
				if(i != node.branch.values.size - 1) putsln(", ");
				else putln();
			}
			print_ast_depth(node.branch.body, depth + 1);
		}
		NodeType::NAMESPACE -> {
			puts("namespace "); node.nameSpace.name.put(); putln();
			for(var i = 0; i < node.nameSpace.body.block.children.size; ++i) {
				print_ast_depth(node.nameSpace.body.block.children.at(i), depth + 1);
			}
		}
		NodeType::NEW -> {
			puts("new "); puts(type_to_string(node.constructor.type));
			for(var i = 0; i < node.constructor.arguments.size; ++i) {
				if(i == 0) putln();
				var arg: Node* = node.constructor.arguments.at(i);
				print_ast_depth(arg, depth + 1);
				if(i != node.constructor.arguments.size -1) putln();
			}
		}
		NodeType::NEW_ARRAY -> {
			puts("new[] "); putsln(type_to_string(node.constructor.type));
			print_ast_depth(node.constructor.array.length, depth + 1);
		}
		NodeType::DELETE -> {
			putsln("delete");
			print_ast_depth(node.deconstructor.value, depth + 1);
			putln();
		}
		NodeType::DELETE_ARRAY -> {
			putsln("delete[]");
			print_ast_depth(node.deconstructor.value, depth + 1);
			putln();
		}
		else -> {
			eputs("Cannot handle type in print_ast_depth - "); eputsln(node_type_to_string(node.type));
		}
	}
}

function print_ast(ast: Node*) {
	print_ast_depth(ast, 0);
}
