import "std/core.zpr";
import "std/io.zpr";
import "std/subprocess.zpr";
import "src/lexer.zpr";
import "src/types.zpr";
import "src/parser.zpr";
import "src/codegen.zpr";
import "src/typecheck.zpr";
import "src/dce.zpr";

// Prefixed with m_ for main

var m_filepath: i8*;
var m_cliSource: i8*;
var m_outFile: i8*;
var m_dumpAst: bool;

function usage_exit(out: int, code: int) {
	fputsln(out, "Possible Arguments:");
	fputsln(out, "zephyr <options> <source>");
	fputsln(out, "    -c   => Provide a source string directly on the CLI");
	fputsln(out, "            Cannot specify with a source file");
	fputsln(out, "    -d   => Display an AST dump");
	fputsln(out, "    -h   => Print this help message");
	fputsln(out, "    -o   => Specify the output file");

	exit(code);
}

function parse_cli_args(argc: int, argv: i8**): i8** {
	for(var i = 0; i < argc; ++i) {
		if(streq(argv[i], "-c")) {
			if(argc - i == 0) usage_exit(stderr, 1);
			m_cliSource = argv[i + 1];
			++i;
		}
		else if(streq(argv[i], "-d")) {
			m_dumpAst = true;
		}
		else if(streq(argv[i], "-h")) {
			usage_exit(stdout, 0);
		}
		else if(streq(argv[i], "-o")) {
			if(argc - i == 0) usage_exit(stderr, 1);
			m_outFile = argv[i + 1];
			++i;
		}
		else if(streq(argv[i], "--")) {
			break;
		}
		else {
			if(m_filepath != null || m_cliSource != null) {
				usage_exit(stderr, 1);
			}
			m_filepath = argv[i];
		}
	}

	return &argv[argc];
}

function main(argc: int, argv: i8**): int {
	if(argc == 1) {
		usage_exit(stderr, 1);
	}

	parse_cli_args(argc - 1, &argv[1]);

	if(m_filepath != null && m_cliSource != null) {
		eputsln("Cannot specify source file and source string");
		usage_exit(stderr, 1);
	}

	if(m_outFile == null) {
		m_outFile = "./a.out";
	}

	var source: i8*;
	if(m_cliSource != null) {
		source = m_cliSource;
	}
	else {
		var sourceFile = fopen(m_filepath, 'r');
		if(sourceFile == null) {
			eputs("Could not open file '"); eputs(m_filepath); eputsln("'");
			exit(1);
		}

		source = sourceFile.slurp(null);
		sourceFile.close();
	}

	var lexer = new_lexer(m_filepath == null ? "cli" : m_filepath, source);

	build_types();

	var parser = new_parser(lexer);

	var ast = parser.parse_program();

	if(parser.error)
		return 1;

	if(m_dumpAst)
		print_ast(ast);

	parser.type_check(ast);

	parser.dce();

	var asmFile: i8[1024];

	strcpy(asmFile, m_outFile);
	strcat(asmFile, ".yasm");

	var out = fopen(asmFile, 'w');
	parser.generate_program(ast, out);
	out.close();
	delete out;

	// Source was read from a file - free it
	// If it's from the CLI do nothing
	if(m_cliSource == null)
		delete source;

	free_tokens();
	free_types();
	free_nodes();

	var objectFile: i8[1024];
	strcpy(objectFile, m_outFile);
	strcat(objectFile, ".o");

	var yasmArgs: i8*[8] = [ "/usr/bin/yasm", "-felf64", "-g", "dwarf2", "-o", objectFile, asmFile, null ];

	var status = exec_command(yasmArgs);

	if(status != 0) {
		eputs("yasm failed (code "); eputd(status); eputsln(")");
		return 1;
	}

	var ldArgs: i8*[5] = [ "/usr/bin/ld", "-o", m_outFile, objectFile, null ];

	status = exec_command(ldArgs);

	if(status != 0) {
		eputs("ld failed (code "); eputd(status); eputsln(")");
		return 1;
	}

	return 0;
}