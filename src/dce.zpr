import "std/core.zpr";
import "std/io.zpr";
import "src/ast.zpr";
import "src/typecheck.zpr";

function Parser.dce_expression(expr: Node*) {
	if(is_binary_op(expr.type)) {
		this.dce_expression(expr.binary.lhs);
		this.dce_expression(expr.binary.rhs);
		return;
	}
	else if(is_unary_op(expr.type)) {
		this.dce_expression(expr.unary);
		return;
	}

	when(expr.type) {
		NodeType::CALL -> {
			var funktion = this.lookup_function_with_arguments(&expr.funktion.name, expr.funktion.argTypes);
			assert(funktion.type == NodeType::FUNCTION, "Typecheck must verify function call type");

			for(var i = 0; i < expr.funktion.arguments.size; ++i) {
				this.dce_expression(expr.funktion.arguments.at(i));
			}

			if(!funktion.funktion.dced) {
				funktion.funktion.dced = true;
				this.dce_function(funktion);
			}
		}
		NodeType::CALL_METHOD -> {
			this.dce_expression(expr.funktion.parent);
			var funktion = expr.funktion.parentType.lookup_method_with_arguments(&expr.funktion.name, expr.funktion.argTypes);

			for(var i = 0; i < expr.funktion.arguments.size; ++i) {
				this.dce_expression(expr.funktion.arguments.at(i));
			}

			if(!funktion.funktion.dced) {
				funktion.funktion.dced = true;
				this.dce_function(funktion);
			}
		}
		NodeType::TERNARY -> {
			this.dce_expression(expr.conditional.condition);
			this.dce_expression(expr.conditional.doTrue);
			this.dce_expression(expr.conditional.doFalse);
		}
		NodeType::CAST, NodeType::INT_TO_FLOAT, NodeType::FLOAT_TO_INT,
		NodeType::PRE_INCREMENT, NodeType::PRE_DECREMENT, NodeType::POST_INCREMENT, NodeType::POST_DECREMENT -> {
			this.dce_expression(expr.unary);
		}
		NodeType::ACCESS_SUBSCRIPT -> {
			this.dce_expression(expr.binary.lhs);
			this.dce_expression(expr.binary.rhs);
		}
		NodeType::ASSIGN -> {
			this.dce_expression(expr.assignment.lhs);
			this.dce_expression(expr.assignment.rhs);
		}
		NodeType::ACCESS_MEMBER -> {
			this.dce_expression(expr.member.parent);
		}
		NodeType::ARRAY_INIT -> {
			for(var i = 0; i < expr.block.children.size; ++i) {
				this.dce_expression(expr.block.children.at(i));
			}
		}
		NodeType::FLOAT_LITERAL, NodeType::STRING -> {
			expr.literal.used = true;
		}
		NodeType::ACCESS_GLOBAL_VAR -> {
			var variable = this.lookup_variable(&expr.variable.name);
			assert(variable.type == NodeType::DEFINE_GLOBAL_VAR, "typechecker must verify global variable type");
			variable.variable.used = true;
		}
		NodeType::NEW -> {
			var mallocFunc = this.resolve_malloc_function();
			if(!mallocFunc.funktion.dced) {
				mallocFunc.funktion.dced = true;
				this.dce_function(mallocFunc);
			}
			if(expr.constructor.arguments != null) {
				for(var i = 0; i < expr.constructor.arguments.size; ++i) {
					var arg: Node* = expr.constructor.arguments.at(i);
					this.dce_expression(arg);
				}
			}
			if(expr.constructor.shouldConstruct) {
				var constructorTok = synthetic_token(TokenType::IDENTIFIER, "constructor");
				var constructorName: Name;
				this.bind_name(&constructorName, constructorTok);

				var constructor = expr.constructor.type.lookup_method_with_arguments(&constructorName, expr.constructor.argTypes);
				if(!constructor.funktion.dced) {
					constructor.funktion.dced = true;
					this.dce_function(constructor);
				}
			}
		}
		NodeType::NEW_ARRAY -> {
			var mallocFunc = this.resolve_malloc_function();
			if(!mallocFunc.funktion.dced) {
				mallocFunc.funktion.dced = true;
				this.dce_function(mallocFunc);
			}
			this.dce_expression(expr.constructor.array.length);

			if(expr.constructor.shouldConstruct) {
				var constructorTok = synthetic_token(TokenType::IDENTIFIER, "constructor");
				var constructorName: Name;
				this.bind_name(&constructorName, constructorTok);

				var argTypes: Vector;
				var constructor = expr.constructor.type.lookup_method_with_arguments(&constructorName, &argTypes);
				if(!constructor.funktion.dced) {
					constructor.funktion.dced = true;
					this.dce_function(constructor);
				}
			}
		}
		NodeType::OVERLOAD -> {
			this.dce_expression(expr.overload.value);
			var func = Typecheck::get_overload_function(expr.overload.lhsType, expr.overload.rhsType, expr.overload.op);
			if(!func.funktion.dced) {
				func.funktion.dced = true;
				this.dce_function(func);
			}
		}
		NodeType::SIZEOF,
		NodeType::CHAR_LITERAL, NodeType::INT_LITERAL, NodeType::UINT_LITERAL, NodeType::ACCESS_VAR -> {}
		else -> {
			eputs("dce_expression unsupported node - ");
			eputsln(node_type_to_string(expr.type));
			exit(1);
		}
	}
}

function Parser.dce_block(block: Node*) {
	for(var i = 0; i < block.block.children.size; ++i) {
		this.dce_statement(block.block.children.at(i));
	}

	for(var i = 0; i < block.block.variables.size; ++i) {
		var variable: Node* = block.block.variables.at(i);
		if(variable.variable.type.type != DataType::STRUCT || variable.variable.type.indirection != 0) {
			continue;
		}

		var deconstructorTok = synthetic_token(TokenType::IDENTIFIER, "deconstructor");
		var deconstructorName: Name;
		this.bind_name(&deconstructorName, deconstructorTok);

		var argTypes: Vector;
		var deconstructor = variable.variable.type.lookup_method_with_arguments(&deconstructorName, &argTypes);

		if(deconstructor != null && !deconstructor.funktion.dced) {
			deconstructor.funktion.dced = true;
			this.dce_function(deconstructor);
		}
	}
}

function Parser.dce_statement(stmt: Node*) {
	when(stmt.type) {
		NodeType::IF -> {
			this.dce_expression(stmt.conditional.condition);
			this.dce_statement(stmt.conditional.doTrue);
			if(stmt.conditional.doFalse != null) this.dce_statement(stmt.conditional.doFalse);
		}
		NodeType::FOR -> {
			if(stmt.loop.initial != null)
				this.dce_statement(stmt.loop.initial);
			if(stmt.loop.condition != null)
				this.dce_expression(stmt.loop.condition);
			if(stmt.loop.iteration != null)
				this.dce_expression(stmt.loop.iteration);
			this.dce_statement(stmt.loop.body);
		}
		NodeType::WHILE, NodeType::DO_WHILE -> {
			this.dce_expression(stmt.conditional.condition);
			this.dce_statement(stmt.conditional.doTrue);
		}
		NodeType::WHEN -> {
			this.dce_expression(stmt.vhen.match);
			for(var i = 0; i < stmt.vhen.branches.size; ++i)
				this.dce_statement((stmt.vhen.branches.at(i) as Node*).branch.body);
			if(stmt.vhen.default != null)
				this.dce_statement(stmt.vhen.default);
		}
		NodeType::DEFINE_VAR -> {
			if(stmt.variable.value != null) {
				this.dce_expression(stmt.variable.value);

				if(stmt.variable.copyConstructor) {
					var copyTok = synthetic_token(TokenType::IDENTIFIER, "copy");
					var copyName: Name;
					this.bind_name(&copyName, copyTok);

					var args: Vector;
					var typePtr = copy_type(stmt.variable.type);
					typePtr.indirection = 1;
					args.push(typePtr);

					var copy = stmt.variable.type.lookup_method_with_arguments(&copyName, &args);
					if(!copy.funktion.dced) {
						this.dce_function(copy);
					}
				}
			}
			if(stmt.variable.arguments != null) {
				var constructorTok = synthetic_token(TokenType::IDENTIFIER, "constructor");
				var constructorName: Name;
				this.bind_name(&constructorName, constructorTok);

				var constructor = stmt.variable.type.lookup_method_with_arguments(&constructorName, stmt.variable.argTypes);
				if(!constructor.funktion.dced) {
					constructor.funktion.dced = true;
					this.dce_function(constructor);
				}

				for(var i = 0; i < stmt.variable.arguments.size; ++i) {
					this.dce_expression(stmt.variable.arguments.at(i));
				}
			}
		}
		NodeType::BLOCK -> {
			this.dce_block(stmt);
		}
		NodeType::EXPR_STMT -> {
			this.dce_expression(stmt.unary);
		}
		NodeType::RETURN -> {
			if(stmt.ret.value != null)
				this.dce_expression(stmt.ret.value);

			if(stmt.ret.copyConstructor) {
				var copyTok = synthetic_token(TokenType::IDENTIFIER, "copy");
				var copyName: Name;
				this.bind_name(&copyName, copyTok);

				var args: Vector;
				var typePtr = copy_type(stmt.ret.type);
				typePtr.indirection = 1;
				args.push(typePtr);

				var copy = stmt.ret.type.lookup_method_with_arguments(&copyName, &args);

				if(!copy.funktion.dced) {
					this.dce_function(copy);
				}
			}
			// Variables are dce'd by dce_block
		}
		NodeType::DELETE -> {
			var freeFunc = this.resolve_free_function();
			if(!freeFunc.funktion.dced) {
				freeFunc.funktion.dced = true;
				this.dce_function(freeFunc);
			}
			this.dce_expression(stmt.deconstructor.value);

			if(stmt.deconstructor.shouldDeconstruct) {
				var deconstructorTok = synthetic_token(TokenType::IDENTIFIER, "deconstructor");
				var deconstructorName: Name;
				this.bind_name(&deconstructorName, deconstructorTok);

				var argTypes: Vector;
				var deconstructor = stmt.unary.computedType.lookup_method_with_arguments(&deconstructorName, &argTypes);

				if(deconstructor != null && !deconstructor.funktion.dced) {
					deconstructor.funktion.dced = true;
					this.dce_function(deconstructor);
				}
			}
		}
		NodeType::DELETE_ARRAY -> {
			var func = this.resolve_get_array_length_function();
			if(!func.funktion.dced) {
				func.funktion.dced = true;
				this.dce_function(func);
			}
			this.dce_expression(stmt.deconstructor.value);
			
			var freeFunc = this.resolve_free_function();
			if(!freeFunc.funktion.dced) {
				freeFunc.funktion.dced = true;
				this.dce_function(freeFunc);
			}

			if(stmt.deconstructor.shouldDeconstruct) {
				var deconstructorTok = synthetic_token(TokenType::IDENTIFIER, "deconstructor");
				var deconstructorName: Name;
				this.bind_name(&deconstructorName, deconstructorTok);

				var argTypes: Vector;
				var deconstructor = stmt.unary.computedType.lookup_method_with_arguments(&deconstructorName, &argTypes);

				if(deconstructor != null && !deconstructor.funktion.dced) {
					deconstructor.funktion.dced = true;
					this.dce_function(deconstructor);
				}
			}
		}
		NodeType::BREAK, NodeType::CONTINUE -> {}
		else -> {
			eputs("dce_statement unsupported node - ");
			eputsln(node_type_to_string(stmt.type));
			exit(1);
		}
	}

	if(stmt.temporaries != null && !stmt.temporaries.empty()) {
		for(var i = 0; i < stmt.temporaries.size; ++i) {
			var temp: Node* = stmt.temporaries.at(i);

			var deconstructorTok = synthetic_token(TokenType::IDENTIFIER, "deconstructor");
			var deconstructorName: Name;
			this.bind_name(&deconstructorName, deconstructorTok);

			var argTypes: Vector;
			var deconstructor = temp.computedType.lookup_method_with_arguments(&deconstructorName, &argTypes);

			if(deconstructor != null && !deconstructor.funktion.dced) {
				deconstructor.funktion.dced = true;
				this.dce_function(deconstructor);
			}
		}
	}
}

function Parser.dce_function(funktion: Node*) {
	for(var i = 0; i < funktion.funktion.arguments.size; ++i) {
		var arg: Node* = funktion.funktion.arguments.at(i);

		if(arg.variable.copyConstructor) {
			var copyTok = synthetic_token(TokenType::IDENTIFIER, "copy");
			var copyName: Name;
			this.bind_name(&copyName, copyTok);

			var args: Vector;
			var typePtr = copy_type(arg.variable.type);
			typePtr.indirection = 1;
			args.push(typePtr);

			var copy = arg.variable.type.lookup_method_with_arguments(&copyName, &args);
			if(!copy.funktion.dced) {
				this.dce_function(copy);
			}
		}
	}

	funktion.funktion.used = true;
	if(!funktion.funktion.hasImplicitBody)
		this.dce_block(funktion.funktion.body);
}

function Parser.dce() {
	var mainTok = synthetic_token(TokenType::IDENTIFIER, "main");
	var mainName: Name;
	this.bind_name(&mainName, mainTok);

	var mainList = this.lookup_function(&mainName);

	if(mainList == null) {
		eputsln("A 'main' function must be defined for a zephyr program");
		exit(1);
	}

	if(mainList.size != 1) {
		eputsln("A program may only define 1 'main' method");
		eputsln("'main' defined at:");
		for(var i = 0; i < mainList.size; ++i) {
			var func: Node* = mainList.at(i);
			func.funktion.name.print_position();
			eputln();
		}
		exit(1);
	}

	var main: Node* = mainList.at(0);

	main.funktion.dced = true;

	this.dce_function(main);

	for(var i = 0; i < this.globalVars.size; ++i) {
		var gvar: Node* = this.globalVars.at(i);

		if(gvar.variable.value != null) {
			this.dce_expression(gvar.variable.value);

			if(gvar.variable.copyConstructor) {
				var copyTok = synthetic_token(TokenType::IDENTIFIER, "copy");
				var copyName: Name;
				this.bind_name(&copyName, copyTok);

				var args: Vector;
				var typePtr = copy_type(gvar.variable.type);
				typePtr.indirection = 1;
				args.push(typePtr);

				var copy = gvar.variable.type.lookup_method_with_arguments(&copyName, &args);
				if(!copy.funktion.dced) {
					this.dce_function(copy);
				}
			}
		}

		if(gvar.variable.arguments != null) {
			var constructorTok = synthetic_token(TokenType::IDENTIFIER, "constructor");
			var constructorName: Name;
			this.bind_name(&constructorName, constructorTok);

			var constructor = gvar.variable.type.lookup_method_with_arguments(&constructorName, gvar.variable.argTypes);
			if(!constructor.funktion.dced) {
				constructor.funktion.dced = true;
				this.dce_function(constructor);
			}

			for(var i = 0; i < gvar.variable.arguments.size; ++i) {
				this.dce_expression(gvar.variable.arguments.at(i));
			}
		}
	}
}