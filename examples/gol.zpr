import "std/core.zpr";
import "std/io.zpr";
import "std/time.zpr";

const ROWS = 10;
const COLUMNS = 20;

enum State {
	DEAD,
	ALIVE
}

function row_col_idx(row: int, col: int): int {
	return col * ROWS + row;
}

function cell_is_alive(row: int, col: int, board: i8*): bool {
	return board[row_col_idx(row, col)] == State::ALIVE;
}

function count_neighbours(row: int, col: int, board: i8*): int {
	var neighbours = 0;
	if(row != 0) {
		neighbours += cell_is_alive(row - 1, col, board);
		if(col != 0) neighbours += cell_is_alive(row - 1, col - 1, board);
		if(col != COLUMNS - 1) neighbours += cell_is_alive(row - 1, col + 1, board);
	}
	if(row != ROWS - 1) {
		neighbours += cell_is_alive(row + 1, col, board);
		if(col != 0) neighbours += cell_is_alive(row + 1, col - 1, board);
		if(col != COLUMNS - 1) neighbours += cell_is_alive(row + 1, col + 1, board);
	}
	if(col != 0) {
		neighbours += cell_is_alive(row, col - 1, board);
	}
	if(col != COLUMNS - 1) {
		neighbours += cell_is_alive(row, col + 1, board);
	}

	return neighbours;
}

function poll_new_state(row: int, col: int, board: i8*, scratchBoard: i8*) {
	var liveNeighbours = count_neighbours(row, col, board);

	var idx = row_col_idx(row, col);

	if(cell_is_alive(row, col, board)) {
		if(liveNeighbours < 2) {
			scratchBoard[idx] = State::DEAD;
		}
		else if(liveNeighbours == 2 || liveNeighbours == 3) {
			scratchBoard[idx] = State::ALIVE;
		}
		else {
			scratchBoard[idx] = State::DEAD;
		}
	}
	else {
		if(liveNeighbours == 3) {
			scratchBoard[idx] = State::ALIVE;
		}
	}
}

function update_board(board: i8*, scratchBoard: i8*) {
	for(var row = 0; row < ROWS; ++row) {
		for(var col = 0; col < COLUMNS; ++col) {
			poll_new_state(row, col, board, scratchBoard);
		}
	}
}

function reset_board(board: i8*, scratchBoard: i8*) {
	memset(board, State::DEAD, ROWS * COLUMNS);
	memset(scratchBoard, State::DEAD, ROWS * COLUMNS);
}

function swap_boards(board: i8*, scratchBoard: i8*) {
	var tmp = board;
	board = scratchBoard;
	scratchBoard = tmp;
}

function print_board(board: i8*) {
	for(var row = 0; row < ROWS; ++row) {
		for(var col = 0; col < COLUMNS; ++col) {
			putc(cell_is_alive(row, col, board) ? '#' : ' ');
		}
		putln();
	}
}

function move_cursor_start() {
	puts("\x1b["); putu(ROWS); puts("A");
	puts("\x1b["); putu(COLUMNS); puts("D");
}

function set_blinker(board: i8*) {
	board[row_col_idx(5, 5)] = State::ALIVE;
	board[row_col_idx(6, 5)] = State::ALIVE;
	board[row_col_idx(7, 5)] = State::ALIVE;
}

function set_glider(board: i8*) {
	board[row_col_idx(2, 0)] = State::ALIVE;
	board[row_col_idx(3, 1)] = State::ALIVE;
	board[row_col_idx(1, 2)] = State::ALIVE;
	board[row_col_idx(2, 2)] = State::ALIVE;
	board[row_col_idx(3, 2)] = State::ALIVE;
}

function main(): int {
	var board: i8[ROWS * COLUMNS];
	var scratchBoard: i8[ROWS * COLUMNS];

	var sleepTime: timespec;
	sleepTime.tv_nsec = 100000000;

	reset_board(board, scratchBoard);

	// Swap to set_blinker(board) for the blinker pattern (an oscillator)
	set_glider(board);

	print_board(board);

	while(true) {
		update_board(board, scratchBoard);

		// If the state is constant across iterations, no further change can happen
		if(memeq(board, scratchBoard, ROWS * COLUMNS)) break;

		clock_nanosleep(CLOCK_MONOTONIC, 0, &sleepTime, null);

		move_cursor_start();

		print_board(scratchBoard);

		memcpy(board, scratchBoard, ROWS * COLUMNS);
	}

	return 0;
}
