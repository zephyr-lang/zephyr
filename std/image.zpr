import "std/core.zpr";
import "std/io.zpr";

namespace std::image {
	struct Color8 {
		red: u8;
		green: u8;
		blue: u8;
	}

	struct PPMImage {
		width: u32;
		height: u32;
		data: Color8*;
	}

	function PPMImage.constructor(width: u32, height: u32) {
		this.width = width;
		this.height = height;
		this.data = new Color8[width * height];
	}

	function PPMImage.copy(other: PPMImage*) {
		this.width = other.width;
		this.height = other.height;
		this.data = new Color8[this.width * this.height];
		for(var i = 0; i < this.width * this.height; ++i) {
			this.data[i] = other.data[i];
		}
	}

	function PPMImage.deconstructor() {
		delete[] this.data;
	}

	function PPMImage.set_pixel(x: u32, y: u32, color: Color8*) {
		var idx = y * this.width + x;
		this.data[idx].red = color.red;
		this.data[idx].green = color.green;
		this.data[idx].blue = color.blue;
	}

	function PPMImage.get_pixel(x: u32, y: u32): Color8* {
		var idx = y * this.width + x;
		return &this.data[idx];
	}

	function PPMImage.save(filename: i8*) {
		var file = fopen(filename, 'w');

		file.putsln("P6");
		file.putu(this.width);
		file.puts(" ");
		file.putu(this.height);
		file.putln();
		file.putu(255); // Max colour value
		file.putln();
		file.write(this.data, this.width * this.height * sizeof(Color8));

		file.close();
	}
}
