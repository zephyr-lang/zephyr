import "std/core.zpr";
import "std/io.zpr";

struct Vector {
	size: int;
	capacity: int;
	data: any**;
}

function Vector.constructor() {
	this.size = 0;
	this.capacity = 8;
	this.data = new any*[this.capacity];
}

function Vector.constructor(initialCapacity: uint) {
	this.size = 0;
	this.capacity = initialCapacity;
	this.data = new any*[this.capacity];
}

function Vector.copy(other: Vector*) {
	this.size = other.size;
	this.capacity = other.capacity;
	this.data = new any*[this.capacity];

	for(var i = 0; i < this.capacity; ++i) {
		this.data[i] = other.data[i];
	}
}

function Vector.deconstructor() {
	delete[] this.data;
}

function Vector.empty(): bool {
	return this.size == 0;
}

function Vector.at(index: int): any* {
	if(index < 0 || index >= this.size) {
		eputsln("Vector index out of bounds");
		exit(-1);
	}
	return this.data[index];
}

function Vector.push(item: any*) {
	if(this.size == this.capacity) {
		var newCapacity = this.capacity * 2;
		var newData = new any*[newCapacity];
		memcpy(newData, this.data, this.capacity * sizeof(any*));

		delete[] this.data;

		this.data = newData;
		this.capacity = newCapacity;
	}
	this.data[this.size] = item;
	++this.size;
}

function Vector.pop(): any* {
	if(this.size == 0) {
		eputsln("Empty vector popped");
		exit(-1);
	}

	return this.data[--this.size];
}

function Vector.top(): any* {
	if(this.size == 0) {
		eputsln("Empty vector top viewed");
		exit(-1);
	}

	return this.data[this.size - 1];
}