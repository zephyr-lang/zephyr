import "std/core.zpr";
import "std/string.zpr";

const stdin = 0;
const stdout = 1;
const stderr = 2;

const __FLOAT_PUT_PRECISION = 7;

//TODO: Make a built-in
function assert(condition: bool, message: i8*) {
	if(!condition) {
		eputsln(message);
		exit(1);
	}
}

// ========== fput family ==========

function fputln(fd: int) {
	var n = '\n';
	write(fd, &n, 1);
}

function fputs(fd: int, str: i8*) {
	write(fd, str, strlen(str));
}

function fputsln(fd: int, str: i8*) {
	fputs(fd, str);
	fputln(fd);
}

function fputc(fd: int, char: i8) {
	write(fd, &char, 1);
}

function fputu(fd: int, val: uint) {
	var buffer: i8[21];
	uitoa(val, buffer);

	fputs(fd, buffer);
}

function fputd(fd: int, val: int) {
	var buffer: i8[21];
	itoa(val, buffer, 10);

	fputs(fd, buffer);
}

function fputft(fd: int, val: f64) {
	var ipart: i64 = val;
	var frac = val - ipart;
	
	if(ipart < 0) {
		fputc(fd, '-');
		ipart = -ipart;
		frac = -frac;
	}

	fputu(fd, ipart);
	fputc(fd, '.');

	var buf: i8[__FLOAT_PUT_PRECISION + 1];

	if(frac == 0) {
		buf[0] = '0';
		buf[1] = 0;
	}
	else {
		for(var i = 0; i < __FLOAT_PUT_PRECISION; ++i) {
			var dig: i8 = (frac * 10.0);
			buf[i] = '0' + dig;
			frac = frac * 10.0 - dig;
		}

		for(var i = __FLOAT_PUT_PRECISION - 1; i >= 0; --i) {
			var n = buf[i] - '0';
			if(n != 0) {
				buf[i + 1] = 0;
				break;
			}
		}
	}
	fputs(fd, buf);
}

// ========== put family ==========

function putln() {
	fputln(stdout);
}

function puts(str: i8*) {
	fputs(stdout, str);
}

function putsln(str: i8*) {
	fputsln(stdout, str);
}

function putc(char: i8) {
	fputc(stdout, char);
}

function putu(val: uint) {
	fputu(stdout, val);
}

function putd(val: int) {
	fputd(stdout, val);
}

function putft(val: f64) {
	fputft(stdout, val);
}

// ========== eput family ==========

function eputln() {
	fputln(stderr);
}

function eputs(str: i8*) {
	fputs(stderr, str);
}

function eputsln(str: i8*) {
	fputsln(stderr, str);
}

function eputc(char: i8) {
	fputc(stderr, char);
}

function eputu(val: uint) {
	fputu(stderr, val);
}

function eputd(val: int) {
	fputd(stderr, val);
}

function eputft(val: f64) {
	fputft(stderr, val);
}

// ========== Files ==========

const __FILE_BUFFER_CAP = 1024;

struct File {
	fd: int;
	name: i8*;

	buffer: i8[__FILE_BUFFER_CAP];
	bufferSize: int;
}

function fopen(name: i8*, mode: i8): File* {
	var openMode: int;
	if(mode == 'w') openMode = O_WRONLY | O_CREAT | O_TRUNC;
	else if(mode == 'r') openMode = O_RDONLY;
	else return null;

	var f: File* = new File;
	f.name = name;
	f.fd = open(name, openMode, 438); // 0o666
	if(f.fd < 0) {
		delete f;
		return null;
	}
	return f;
}

// ===== Writing =====

function File.flush() {
	if(this.bufferSize > 0) {
		write(this.fd, this.buffer, this.bufferSize);
		this.bufferSize = 0;
	}
}

function File.write(buf: any*, size: int) {
	if(this.bufferSize + size > __FILE_BUFFER_CAP) {
		this.flush();
	}
	if(size > __FILE_BUFFER_CAP) {
		write(this.fd, buf, size);
	}
	else {
		memcpy(&this.buffer[this.bufferSize], buf, size);
		this.bufferSize += size;
	}
}

function File.putln() {
	this.putc('\n');
}

function File.puts(str: i8*) {
	this.write(str, strlen(str));
}

function File.putsln(str: i8*) {
	this.puts(str);
	this.putln();
}

function File.putc(char: i8) {
	this.write(&char, 1);
}

function File.putu(val: uint) {
	var buffer: i8[21];
	uitoa(val, buffer);

	this.write(buffer, strlen(buffer));
}

function File.putd(val: int) {
	var buffer: i8[21];
	itoa(val, buffer, 10);

	this.write(buffer, strlen(buffer));
}

function File.putft(val: f64) {
	var ipart: i64 = val;
	var frac = val - ipart;
	
	if(ipart < 0) {
		this.putc('-');
		ipart = -ipart;
		frac = -frac;
	}

	this.putu(ipart);
	this.putc('.');

	var buf: i8[__FLOAT_PUT_PRECISION + 1];

	if(frac == 0) {
		buf[0] = '0';
		buf[1] = 0;
	}
	else {
		for(var i = 0; i < __FLOAT_PUT_PRECISION; ++i) {
			var dig: i8 = (frac * 10.0);
			buf[i] = '0' + dig;
			frac = frac * 10.0 - dig;
		}

		for(var i = __FLOAT_PUT_PRECISION - 1; i >= 0; --i) {
			var n = buf[i] - '0';
			if(n != 0) {
				buf[i + 1] = 0;
				break;
			}
		}
	}
	this.puts(buf);
}

// ===== Reading =====

function File.read(buf: any*, size: int): int {
	var n = read(this.fd, buf, size);
	return n;
}

function File.close() {
	this.flush();
	close(this.fd);
	this.fd = -1;
}

function File.seek(offset: int, w: int): int {
	var n = lseek(this.fd, offset, w);
	return n;
}

function File.size(): int {
	var pos = lseek(this.fd, 0, SEEK_CUR);
	var size = lseek(this.fd, 0, SEEK_END);
	lseek(this.fd, pos, SEEK_SET);
	return size;
}

function File.slurp(sizeptr: int*): i8* {
	var size = this.size();
	var text: i8* = new i8[size + 1];
	this.read(text, size);
	text[size] = 0;
	if(sizeptr as int) *sizeptr = size;
	return text;
}